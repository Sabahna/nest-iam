generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client2"
    binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x", "windows", "darwin"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model ScopeNoSql {
    id         String            @id @default(auto()) @map("_id") @db.ObjectId
    name       String            @unique
    desc       String?
    scopes     PermissionNoSql[]
    created_at DateTime          @default(now())
    updated_at DateTime          @updatedAt

    @@index([id])
    @@map("scope")
}

model ResourceNoSql {
    id          String            @id @default(auto()) @map("_id") @db.ObjectId
    name        String            @unique
    desc        String?
    permissions PermissionNoSql[]
    created_at  DateTime          @default(now())
    updated_at  DateTime          @updatedAt

    @@index([id])
    @@map("resource")
}

model PermissionNoSql {
    id               String                   @id @default(auto()) @map("_id") @db.ObjectId
    title            String?
    name             String                   @unique
    desc             String?
    resource         ResourceNoSql            @relation(fields: [resource_id], references: [id], onDelete: Cascade)
    resource_id      String                   @db.ObjectId
    scope            ScopeNoSql               @relation(fields: [scope_id], references: [id], onDelete: Cascade)
    scope_id         String                   @db.ObjectId
    permission_roles PermissionRoleNoSql[]
    parent           RelatedPermissionNoSql[] @relation("children")
    children         RelatedPermissionNoSql[] @relation("parent")
    created_at       DateTime                 @default(now())
    updated_at       DateTime                 @updatedAt

    @@index([id, resource_id, scope_id])
    @@map("permission")
}

model RelatedPermissionNoSql {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    parent    PermissionNoSql @relation("parent", fields: [parent_id], references: [id], onDelete: Cascade)
    parent_id String          @db.ObjectId
    child     PermissionNoSql @relation("children", fields: [child_id], references: [id], onDelete: Cascade)
    child_id  String          @db.ObjectId

    @@index([parent_id, child_id])
    @@map("related_permission")
}

model RoleNoSql {
    id               String                @id @default(auto()) @map("_id") @db.ObjectId
    name             String
    desc             String?
    uuid             String
    options          Json?
    permission_roles PermissionRoleNoSql[]
    users            UserRoleNoSql[]
    created_at       DateTime              @default(now())
    updated_at       DateTime              @updatedAt

    @@index([id])
    @@map("role")
}

model PermissionRoleNoSql {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    permission    PermissionNoSql @relation(fields: [permission_id], references: [id], onDelete: Cascade)
    permission_id String          @db.ObjectId
    role          RoleNoSql       @relation(fields: [role_id], references: [id], onDelete: Cascade)
    role_id       String          @db.ObjectId

    @@index([permission_id, role_id])
    @@map("permission_role")
}

model UserNoSql {
    id       String             @id @default(auto()) @map("_id") @db.ObjectId
    username String             @unique
    roles    UserRoleNoSql[]
    sessions UserSessionNoSql[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([id, username])
    @@map("user")
}

model UserRoleNoSql {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    user    UserNoSql @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String    @db.ObjectId
    role    RoleNoSql @relation(fields: [role_id], references: [id], onDelete: Cascade)
    role_id String    @db.ObjectId
    uuid    String

    @@index([user_id, role_id, uuid])
    @@map("role_user")
}

model UserSessionNoSql {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    token         String?
    refresh_token String?
    user_id       String    @db.ObjectId
    user          UserNoSql @relation(fields: [user_id], references: [id], onDelete: Cascade)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([id, user_id])
    @@map("session")
}
